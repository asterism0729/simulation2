// Generated by gencpp from file exploration_msgs/AvoidanceStatus.msg
// DO NOT EDIT!


#ifndef EXPLORATION_MSGS_MESSAGE_AVOIDANCESTATUS_H
#define EXPLORATION_MSGS_MESSAGE_AVOIDANCESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace exploration_msgs
{
template <class ContainerAllocator>
struct AvoidanceStatus_
{
  typedef AvoidanceStatus_<ContainerAllocator> Type;

  AvoidanceStatus_()
    : header()
    , status()
    , calc_range_method(0)
    , range_pattern()
    , descriptions()
    , scan_frame_id()
    , scan_angle_min(0.0)
    , scan_angle_max(0.0)
    , scan_angle_increment(0.0)  {
    }
  AvoidanceStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(_alloc)
    , calc_range_method(0)
    , range_pattern(_alloc)
    , descriptions(_alloc)
    , scan_frame_id(_alloc)
    , scan_angle_min(0.0)
    , scan_angle_max(0.0)
    , scan_angle_increment(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef uint8_t _calc_range_method_type;
  _calc_range_method_type calc_range_method;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _range_pattern_type;
  _range_pattern_type range_pattern;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _descriptions_type;
  _descriptions_type descriptions;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _scan_frame_id_type;
  _scan_frame_id_type scan_frame_id;

   typedef float _scan_angle_min_type;
  _scan_angle_min_type scan_angle_min;

   typedef float _scan_angle_max_type;
  _scan_angle_max_type scan_angle_max;

   typedef float _scan_angle_increment_type;
  _scan_angle_increment_type scan_angle_increment;



  enum {
    NORMAL = 0u,
    COS = 1u,
  };


  typedef boost::shared_ptr< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> const> ConstPtr;

}; // struct AvoidanceStatus_

typedef ::exploration_msgs::AvoidanceStatus_<std::allocator<void> > AvoidanceStatus;

typedef boost::shared_ptr< ::exploration_msgs::AvoidanceStatus > AvoidanceStatusPtr;
typedef boost::shared_ptr< ::exploration_msgs::AvoidanceStatus const> AvoidanceStatusConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exploration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'exploration_msgs': ['/home/ros/catkin_ws/src/multiple_robots_slam/exploration_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "644ba19b79e5b551c2edaf8b46d599dc";
  }

  static const char* value(const ::exploration_msgs::AvoidanceStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x644ba19b79e5b551ULL;
  static const uint64_t static_value2 = 0xc2edaf8b46d599dcULL;
};

template<class ContainerAllocator>
struct DataType< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exploration_msgs/AvoidanceStatus";
  }

  static const char* value(const ::exploration_msgs::AvoidanceStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NORMAL = 0\n\
uint8 COS = 1\n\
\n\
std_msgs/Header header\n\
string status # move_base, VFH\n\
uint8 calc_range_method # normal , cos\n\
float64[] range_pattern # avoidance ranges pattern\n\
string[] descriptions # ranges description\n\
string scan_frame_id\n\
float32 scan_angle_min\n\
float32 scan_angle_max\n\
float32 scan_angle_increment\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::exploration_msgs::AvoidanceStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.calc_range_method);
      stream.next(m.range_pattern);
      stream.next(m.descriptions);
      stream.next(m.scan_frame_id);
      stream.next(m.scan_angle_min);
      stream.next(m.scan_angle_max);
      stream.next(m.scan_angle_increment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AvoidanceStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exploration_msgs::AvoidanceStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exploration_msgs::AvoidanceStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "calc_range_method: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calc_range_method);
    s << indent << "range_pattern[]" << std::endl;
    for (size_t i = 0; i < v.range_pattern.size(); ++i)
    {
      s << indent << "  range_pattern[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.range_pattern[i]);
    }
    s << indent << "descriptions[]" << std::endl;
    for (size_t i = 0; i < v.descriptions.size(); ++i)
    {
      s << indent << "  descriptions[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.descriptions[i]);
    }
    s << indent << "scan_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.scan_frame_id);
    s << indent << "scan_angle_min: ";
    Printer<float>::stream(s, indent + "  ", v.scan_angle_min);
    s << indent << "scan_angle_max: ";
    Printer<float>::stream(s, indent + "  ", v.scan_angle_max);
    s << indent << "scan_angle_increment: ";
    Printer<float>::stream(s, indent + "  ", v.scan_angle_increment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXPLORATION_MSGS_MESSAGE_AVOIDANCESTATUS_H
