// Generated by gencpp from file exploration_msgs/Frontier.msg
// DO NOT EDIT!


#ifndef EXPLORATION_MSGS_MESSAGE_FRONTIER_H
#define EXPLORATION_MSGS_MESSAGE_FRONTIER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace exploration_msgs
{
template <class ContainerAllocator>
struct Frontier_
{
  typedef Frontier_<ContainerAllocator> Type;

  Frontier_()
    : point()
    , area(0.0)
    , variance()
    , covariance(0.0)
    , status(0)  {
    }
  Frontier_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , area(0.0)
    , variance(_alloc)
    , covariance(0.0)
    , status(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef double _area_type;
  _area_type area;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _variance_type;
  _variance_type variance;

   typedef double _covariance_type;
  _covariance_type covariance;

   typedef uint8_t _status_type;
  _status_type status;



  enum {
    NORMAL = 0u,
    NOT_USEFUL = 1u,
    ON_MAP = 2u,
  };


  typedef boost::shared_ptr< ::exploration_msgs::Frontier_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exploration_msgs::Frontier_<ContainerAllocator> const> ConstPtr;

}; // struct Frontier_

typedef ::exploration_msgs::Frontier_<std::allocator<void> > Frontier;

typedef boost::shared_ptr< ::exploration_msgs::Frontier > FrontierPtr;
typedef boost::shared_ptr< ::exploration_msgs::Frontier const> FrontierConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exploration_msgs::Frontier_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exploration_msgs::Frontier_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exploration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'exploration_msgs': ['/home/ros/catkin_ws/src/multiple_robots_slam/exploration_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::exploration_msgs::Frontier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exploration_msgs::Frontier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exploration_msgs::Frontier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exploration_msgs::Frontier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_msgs::Frontier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_msgs::Frontier_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exploration_msgs::Frontier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33a483fe8f5225067ee15b62f5db7607";
  }

  static const char* value(const ::exploration_msgs::Frontier_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33a483fe8f522506ULL;
  static const uint64_t static_value2 = 0x7ee15b62f5db7607ULL;
};

template<class ContainerAllocator>
struct DataType< ::exploration_msgs::Frontier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exploration_msgs/Frontier";
  }

  static const char* value(const ::exploration_msgs::Frontier_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exploration_msgs::Frontier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NORMAL = 0\n\
uint8 NOT_USEFUL = 1\n\
uint8 ON_MAP = 2\n\
\n\
geometry_msgs/Point point\n\
float64 area\n\
geometry_msgs/Vector3 variance\n\
float64 covariance\n\
uint8 status\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::exploration_msgs::Frontier_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exploration_msgs::Frontier_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.area);
      stream.next(m.variance);
      stream.next(m.covariance);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Frontier_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exploration_msgs::Frontier_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exploration_msgs::Frontier_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "area: ";
    Printer<double>::stream(s, indent + "  ", v.area);
    s << indent << "variance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.variance);
    s << indent << "covariance: ";
    Printer<double>::stream(s, indent + "  ", v.covariance);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXPLORATION_MSGS_MESSAGE_FRONTIER_H
